These are miscellaneous comments on the KeyKit source code.
You should only be interested in this stuff if the top-level
makefile fails in some way, or if you're porting KeyKit to
a new machine or environment.

The "protoflp" program is used to flip the KeyKit source between
two states: 1) using prototype function declarations and definitions,
and 2) not using them.  KeyKit should normally be distributed with
prototype declarations turned off, since this is the most portable.
If you (or your compiler) want to use prototypes, all you have to do is
edit the makefile to set PROTO=-p, then run "make protoproc"
(which will run protoflp on each source file).   Similarly, if
the KeyKit source you have is set up to use prototypes, and your
compiler can't handle them, you can flip it back to not using
prototypes by setting PROTO=-n and running "make protoproc".

The '-s' option to protoflp suppresses stdout; used when only interested
in generating the extern function declarations.

The d_*.h files contain external function declarations that are
automatically generated by protoflp.

Note: for GCC, need to include function attribute __no_return__ on
functions that don't return (e.g. execerror, restartexec, etc) to
suppress maybe-not-initialized optimization warnings.  However, the
attribute can only be on the function prototype, not the function
declaration. This is done by using special "NO_RETURN_ATTRIBUTE" macro
between the function header and body; protoflp will copy the attribute
into the d_*.h extern function declaration files. Linux target mdep.h
provides appropriate NO_RETURN_ATTRIBUTE macro definition, but if
not defined, key.h will supply an empty defintion (and replaces it with
an empty defintition after including all d_*.h headers).

When working on the graphics functions for a new machine or environment,
you should make use of the ptest1, ptest2, and ptest3 test programs to
exercise them.
