// Code generated by goyacc -o gram.go -v gram.output gram.y. DO NOT EDIT.

//line gram.y:1

/*
 *	Copyright 1996 AT&T Corp.  All rights reserved.
 */

#define OVERLAY3
#define YYDEBUG 1
#define MYYYDEBUG 1

/* to help avoid multiple <malloc> includes, since yacc inserts one */
#define DONTINCLUDEkmalloc

#include "key.h"
#define code2(a,b) code(a),code(b)
#define code3(a,b,c) code(a),code(b),code(c)
#define code4(a,b,c,d) code(a),code(b),code(c),code(d)
#define code6(a,b,c,d,e,f) code(a),code(b),code(c),code(d),code(e),code(f)

#define STUFFCODE(t,i,v) *ptincode(t,i)=v

static int Sawinit = 0;
static char* Methtemp;


//line gram.y:25
type yySymType struct {
	yys int
	Symbolp	sym;	/* symbol table pointer */
	Instnodep in;	/* machine instruction */
	int	num;	/* number of arguments */
	long	val;	/* numeric constant */
	DBLTYPE	dbl;	/* floating constant */
	char	*str;	/* string constant */
	Phrasep	phr;	/* phrase constant */
}

const VAR = 57346
const UNDEF = 57347
const MACRO = 57348
const TOGLOBSYM = 57349
const QMARK2 = 57350
const DOLLAR2 = 57351
const WHILE = 57352
const DOTDOTDOT = 57353
const IF = 57354
const ELSE = 57355
const FOR = 57356
const SYM_IN = 57357
const BEINGREAD = 57358
const EVAL = 57359
const BREAK = 57360
const CONTINUE = 57361
const TASK = 57362
const SYM_DELETE = 57363
const UNDEFINE = 57364
const RETURN = 57365
const FUNC = 57366
const DEFINED = 57367
const READONLY = 57368
const ONCHANGE = 57369
const GLOBALDEC = 57370
const CLASS = 57371
const METHOD = 57372
const KW_NEW = 57373
const NARGS = 57374
const TYPEOF = 57375
const XY = 57376
const DUR = 57377
const VOL = 57378
const TIME = 57379
const CHAN = 57380
const PITCH = 57381
const LENGTH = 57382
const NUMBER = 57383
const TYPE = 57384
const ATTRIB = 57385
const FLAGS = 57386
const VARG = 57387
const PORT = 57388
const PHRASE = 57389
const STRING = 57390
const NAME = 57391
const INTEGER = 57392
const OBJECT = 57393
const DOUBLE = 57394
const PLUSEQ = 57395
const MINUSEQ = 57396
const MULEQ = 57397
const DIVEQ = 57398
const AMPEQ = 57399
const INC = 57400
const DEC = 57401
const POSTINC = 57402
const POSTDEC = 57403
const OREQ = 57404
const XOREQ = 57405
const RSHIFTEQ = 57406
const LSHIFTEQ = 57407
const OR = 57408
const AND = 57409
const GT = 57410
const GE = 57411
const LT = 57412
const LE = 57413
const EQ = 57414
const NE = 57415
const REGEXEQ = 57416
const LSHIFT = 57417
const RSHIFT = 57418
const UNARYMINUS = 57419
const BANG = 57420

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"VAR",
	"UNDEF",
	"MACRO",
	"TOGLOBSYM",
	"QMARK2",
	"DOLLAR2",
	"WHILE",
	"DOTDOTDOT",
	"IF",
	"ELSE",
	"FOR",
	"SYM_IN",
	"BEINGREAD",
	"EVAL",
	"BREAK",
	"CONTINUE",
	"TASK",
	"SYM_DELETE",
	"UNDEFINE",
	"RETURN",
	"FUNC",
	"DEFINED",
	"READONLY",
	"ONCHANGE",
	"GLOBALDEC",
	"CLASS",
	"METHOD",
	"KW_NEW",
	"NARGS",
	"TYPEOF",
	"XY",
	"DUR",
	"VOL",
	"TIME",
	"CHAN",
	"PITCH",
	"LENGTH",
	"NUMBER",
	"TYPE",
	"ATTRIB",
	"FLAGS",
	"VARG",
	"PORT",
	"PHRASE",
	"STRING",
	"NAME",
	"INTEGER",
	"OBJECT",
	"DOUBLE",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"AMPEQ",
	"INC",
	"DEC",
	"POSTINC",
	"POSTDEC",
	"OREQ",
	"XOREQ",
	"RSHIFTEQ",
	"LSHIFTEQ",
	"'='",
	"'?'",
	"':'",
	"OR",
	"AND",
	"'|'",
	"'^'",
	"'&'",
	"GT",
	"GE",
	"LT",
	"LE",
	"EQ",
	"NE",
	"REGEXEQ",
	"LSHIFT",
	"RSHIFT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"UNARYMINUS",
	"BANG",
	"'~'",
	"'%'",
	"'.'",
	"';'",
	"'('",
	"')'",
	"'{'",
	"'}'",
	"','",
	"'['",
	"']'",
	"'$'",
}

var yyStatenames = [...]string{
}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line gram.y:583


int
startparams(void)
{
	if ( Inparams ) {
		yyerror("Nested parameter lists!?!");
		return 1;
	}
	Inparams=1;
	return 0;
}

void
endparams(Instnodep codeptr,int nparams,Symbolp funcsym)
{
	Inparams = 0;
	STUFFCODE(codeptr,1, numinst(nparams));
	STUFFCODE(codeptr,2, syminst(funcsym));
	code(funcinst(I_FILENAME));
	code(strinst(Infile?uniqstr(Infile):Nullstr));
}

void
patchlocals(Instnodep codeptr)
{
	STUFFCODE(codeptr,3,numinst(Currct->localnum-1));
}

Symbolp
forceglobal(Symbolp s)
{
	Symbolp gs;
	Symstr up = symname(s);
	s->stype = TOGLOBSYM;
	gs = globalinstall(up, UNDEF);
	s->sd.u.sym = gs;
	return gs;
}

Symbolp
local2globalinstall(Symstr up)
{
	Symbolp s, s2;
	/* Add a symbol to the current local context, */
	/* which points us to the global symbol. */
	s = globalinstall(up, UNDEF);
	s2 = localinstall(up, TOGLOBSYM);
	s2->sd.u.sym = s;
	return s;
}

Symbolp
installvar(Symstr up)
{
	Symbolp s;

	if ( Inparams )
		return localinstall(up, UNDEF);

	if ((s=findsym(up,Currct->symbols)) != 0) {
		s->flags |= S_SEEN;
		if ( s->stype == TOGLOBSYM ) {
			s = s->sd.u.sym;
		}
		return s;
	}

	if ( Currct == Topct ) {
		/* we know it's not there already, so use globalinstallnew() */
		return globalinstallnew(up, UNDEF);
	}

	if ( Globaldecl != 0 )
		return local2globalinstall(up);

	/* See if it's a keyword or macro */
	if ( (s=findsym(up,Topct->symbols)) != NULL ) {
		if ( s->stype != UNDEF && s->stype != VAR )
			return s;
		if ( s->stype == VAR && s->sd.type == D_CODEP )
			return s;
	}
	/* Upper-case names are, by default, global. */
	if ( *up>='A' && *up<='Z' )
		return local2globalinstall(up);

	s = localinstall(up, UNDEF);
	return s;
}

int
yylex()
{
	register int c;
	int retval;
	int lastc = 0;
	int isdouble, nextc;
	long bmult = 1;
	long tot;

	Macrosused = 0;

    restart:
	/* Skip initial white space */
	do {
		c = yyinput();
	} while ( c == ' ' || c == '\t' || c == '\n' );

	if ( c == EOF ) {
#ifdef MYYYDEBUG
		if ( yydebug )
			printf("yylex returns 0, EOF\n");
#endif
		return(0);
	}

	Pyytext = Yytext;
	*Pyytext++ = c;

	if ( isname1char(c) ) {
		Symstr up;
		Symbolp s;

		while ((c=yyinput()) != EOF && isnamechar(c) )
			;
		yyunget(c);
		*Pyytext = '\0';

		up = uniqstr(Yytext);
		if ( (s=findsym(up,Keywords)) != NULL ) {
			retval = s->stype;
			yylval.sym = s;
			goto getout;
		}
		if ( (s=findsym(up,Macros)) != NULL ) {
			macroeval(up);
			goto restart;
		}
		yylval.str = up;
		retval = NAME;
		goto getout;
	}
	if ( c == '#' ) {
		if ( eatpound() == 0 ) {
#ifdef MYYYDEBUG
			if ( yydebug )
				printf("yylex eatpound returns 0, EOF\n");
#endif
			return(0);
		}
		goto restart;
	}
	isdouble = 0;
	if ( c == '.' ) {
		c = yyinput();
		/* allow numbers to start with . */
		if ( isdigit(c) ) {
			isdouble = 1;
			goto dblread;
		}
		if ( c == '.' ) {
			c = yyinput();
			if ( c == '.' ) {
				retval = DOTDOTDOT;
				goto getout;
			}
			execerror(".. is not valid - perhaps you meant ... ?");
		}
		yyunget(c);
		retval = '.';
		goto getout;
	}
	if ( c == '0' ) {	/* octal or hex numbers */
		tot = 0;
		if ( (c=yyinput()) == 'x' ) {			/* hex */
			while ( (c=yyinput()) != EOF ) {
				int h = hexchar(c);
				if ( h<0 )
					break;
				tot = 16 * tot + h;
			}
		}
		else if ( isdigit(c) ) {			/* octal */
			int e = 0;
			do {
				if ( c < '0' || c > '9' )
					break;
				if ( (c=='8'||c=='9') && e++ == 0 )
					eprint("Invalid octal number!\n");
				tot = 8 * tot + (c-'0');
			} while ( (c=yyinput()) != EOF );
		}
		else if ( c == '.' )
			goto foundadot;

		if ( c=='b' || c=='q' )
			bmult = ((Clicks==NULL)?(DEFCLICKS):(*Clicks));
		else
			yyunget(c);
			
		yylval.val = tot * bmult;
		retval = INTEGER;
		goto getout;
	}
	if ( isdigit(c) ) {			/* integers and floats */
	    dblread:
		for ( ; (c=yyinput()) != EOF; lastc=c ) {
			if ( isdigit(c) )
				continue;
			if ( c == '.' ) {
			    foundadot:
				/* look ahead to see if it's a float */
				nextc = yyinput();
				yyunget(nextc);
				if ( isdigit(nextc) || nextc=='e' ) {
					isdouble = 1;
					continue;
				}
				yyunget('.');
				/* a number followed by a '.' *and* then */
				/* followed by a non-digit is probably */
				/* an expression like ph%2.pitch, so we */
				/* just return the integer. */
				break;
			}
			if ( c == 'e' ) {
				isdouble = 1;
				continue;
			}
			/* An integer with a 'b' or 'q' suffix is multiplied by */
			/* the number of clicks in a quarter note. */
			if ( ! isdouble && (c=='q' || c=='b') ) {
				bmult = ((Clicks==NULL)?(DEFCLICKS):(*Clicks));
				/* and we're done */
				break;
			}
			if ( (c=='+'||c=='-') && lastc=='e' ) {
				isdouble = 1;
				continue;
			}
			yyunget(c);
			break;
		}
		*Pyytext = '\0';

		if ( isdouble ) {
			yylval.dbl = (DBLTYPE) atof(Yytext);
			retval = DOUBLE;
		}
		else {
			yylval.val = atol(Yytext) * bmult;
			retval = INTEGER;
		}
		goto getout;
	}
	if ( c == '\'' ) {
		yyunget(c);
		yylval.phr = yyphrase(yyinput);
		phincruse(yylval.phr);
		retval = PHRASE;
		goto getout;
	}
	/* strings ) */
	if ( c == '"' ) {
		int si = 0;
		int ch, n, i;

		while ( (ch=yyinput()) != '"' ) {

		    rechar:
			if ( ch == EOF )
				execerror("missing ending-quote on string");
			if ( ch == '\n' )
				execerror("Newline inside string?!");
			/* interpret \-characters */
			if ( ch == '\\' ) {
				switch ( ch=yyinput() ) {
				case '\n':
					/* escaped newlines are ignored */
					ch = yyinput();
					goto rechar;
					/* break; */
				case '0':
					/* Handle \0ddd numbers */
					for ( n=0,i=0; i<3; i++ ) {
						ch = yyinput();
						if ( ! isdigit(ch) )
							break;
						n = n*8 + ch - '0';
					}
					yyunget(ch);
					ch = n;
					break;
				case 'x':
					/* Handle \xfff numbers */
					for ( n=0,i=0; i<3; i++ ) {
						ch = hexchar(yyinput());
						if ( ch < 0 )
							break;
						n = n*16 + ch;
					}
					yyunget(ch);
					ch = n;
					break;
#ifdef OLDSTUFF
				/* use this if \xFF has only 2 chars */
				case 'x':
					{ int h1, h2;
					/* Handle \xFF numbers */
					h1 = hexchar(yyinput());
					h2 = hexchar(yyinput());
					if ( h1<0 || h2<0 ) {
						eprint("Invalid hex number!\n");
						ch = 0;
					}
					else
						ch = h1*16 + h2;
					}
					break;
#endif
				case 'b': ch ='\b'; break;
				case 'f': ch ='\f'; break;
				case 'n': ch ='\n'; break;
				case 'r': ch ='\r'; break;
				case 't': ch ='\t'; break;
				case 'v': ch ='\v'; break;
				case '"': ch ='"'; break;
				case '\'': ch ='\''; break;
				case '\\': ch = '\\'; break;
				default:
					if ( Slashcheck != NULL && *Slashcheck != 0 ) {
						eprint("Unrecognized backslashed character (%c) is ignored\n",ch);
						ch = yyinput();
						goto rechar;
					} else {
						yyunget(ch);
						ch = '\\';
					}
					break;
				}
			}
			makeroom((long)(si+2),&Msg1,&Msg1size); /* +1 for final '\0' */
			Msg1[si++] = ch;
		}
		Msg1[si] = '\0';
		yylval.str = uniqstr(Msg1);
		retval = STRING;
		goto getout;
	}
	if ( c == '$' ) {
		c = yyinput();
		if ( c == '$' ) {
			retval = DOLLAR2;
			goto getout;
		}
		if ( isdigit(c) || c == '-' ) {
			long n;
			int sgn;
			if ( c == '-' ) {
				n = 0;
				sgn = -1;
			}
			else {
				n = c - '0';
				sgn = 1;
			}
			while ( (c=yyinput()) != EOF ) {
				if ( ! isdigit(c) ) {
					yyunget(c);
					break;
				}
				n = n*10 + c - '0';
			}
			yylval.val = n*sgn + *Kobjectoffset;
			if ( yylval.val >= Nextobjid )
				Nextobjid = yylval.val + 1;
			retval = OBJECT;
			goto getout;
		}
		yyunget(c);
		retval = '$';
		goto getout;
	}
	switch(c) {
	case '\n': retval = '\n'; break;
	case '?':  retval = follow('?', QMARK2, '?'); break;
	case '=':  retval = follow('=', EQ, '='); break;
	case '+':  retval = follo2('=', PLUSEQ, '+', INC, '+'); break;
	case '-':  retval = follo2('=', MINUSEQ, '-', DEC, '-'); break;
	case '*':  retval = follow('=', MULEQ, '*'); break;
	case '>':  retval = follo3('=', GE, '>', '=',RSHIFT,RSHIFTEQ,GT);break;
	case '<':  retval = follo3('=', LE, '<', '=',LSHIFT,LSHIFTEQ,LT);break;
	case '!':  retval = follow('=', NE, BANG); break;
	case '&':  retval = follo2('=', AMPEQ, '&', AND, '&'); break;
	case '|':  retval = follo2('=', OREQ, '|', OR, '|'); break;
	case '/':  retval = follow('=', DIVEQ, '/'); break;
	case '^':  retval = follow('=', XOREQ, '^'); break;
	case '~':  retval = follow('~', REGEXEQ, '~'); break;
	default:   retval = c; break;
	}
    getout:
	*Pyytext = '\0';
#ifdef MYYYDEBUG
	if ( yydebug )
		printf("yylex returns %d, Yytext=(%s)\n",retval,Yytext);
#endif
	return(retval);
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 145,
	95, 105,
	-2, 101,
	-1, 146,
	95, 112,
	-2, 108,
	-1, 162,
	74, 0,
	75, 0,
	76, 0,
	77, 0,
	78, 0,
	79, 0,
	80, 0,
	-2, 65,
	-1, 163,
	74, 0,
	75, 0,
	76, 0,
	77, 0,
	78, 0,
	79, 0,
	80, 0,
	-2, 66,
	-1, 164,
	74, 0,
	75, 0,
	76, 0,
	77, 0,
	78, 0,
	79, 0,
	80, 0,
	-2, 67,
	-1, 165,
	74, 0,
	75, 0,
	76, 0,
	77, 0,
	78, 0,
	79, 0,
	80, 0,
	-2, 68,
	-1, 166,
	74, 0,
	75, 0,
	76, 0,
	77, 0,
	78, 0,
	79, 0,
	80, 0,
	-2, 69,
	-1, 167,
	74, 0,
	75, 0,
	76, 0,
	77, 0,
	78, 0,
	79, 0,
	80, 0,
	-2, 70,
	-1, 168,
	74, 0,
	75, 0,
	76, 0,
	77, 0,
	78, 0,
	79, 0,
	80, 0,
	-2, 71,
	-1, 354,
	15, 87,
	53, 87,
	54, 87,
	55, 87,
	56, 87,
	57, 87,
	58, 87,
	59, 87,
	62, 87,
	63, 87,
	64, 87,
	65, 87,
	66, 87,
	67, 87,
	69, 87,
	70, 87,
	71, 87,
	72, 87,
	73, 87,
	74, 87,
	75, 87,
	76, 87,
	77, 87,
	78, 87,
	79, 87,
	80, 87,
	81, 87,
	82, 87,
	83, 87,
	84, 87,
	85, 87,
	86, 87,
	90, 87,
	91, 87,
	93, 87,
	95, 87,
	98, 87,
	-2, 90,
	-1, 363,
	95, 126,
	-2, 121,
}

const yyPrivate = 57344

const yyLast = 2403

var yyAct = [...]int{
	8, 254, 389, 3, 4, 220, 340, 27, 58, 260,
	6, 333, 189, 225, 302, 104, 261, 103, 197, 174,
	151, 183, 80, 106, 224, 241, 357, 240, 112, 114,
	130, 194, 133, 134, 135, 136, 137, 138, 132, 328,
	264, 140, 80, 232, 230, 417, 413, 401, 139, 400,
	361, 360, 145, 148, 358, 317, 186, 415, 409, 388,
	387, 149, 316, 315, 152, 153, 154, 155, 156, 157,
	158, 159, 160, 161, 162, 163, 164, 165, 166, 167,
	168, 169, 170, 171, 172, 84, 85, 80, 313, 222,
	307, 129, 244, 414, 391, 379, 376, 374, 80, 370,
	87, 181, 61, 354, 327, 60, 319, 80, 308, 184,
	297, 295, 192, 281, 277, 272, 187, 198, 190, 263,
	87, 191, 61, 195, 246, 60, 245, 239, 235, 208,
	84, 85, 204, 405, 372, 330, 329, 320, 285, 201,
	283, 84, 85, 209, 210, 211, 280, 265, 222, 205,
	84, 85, 219, 71, 72, 64, 65, 66, 67, 193,
	188, 199, 63, 86, 102, 87, 143, 61, 66, 67,
	60, 142, 141, 63, 86, 129, 87, 221, 61, 223,
	228, 60, 63, 86, 111, 87, 110, 61, 108, 233,
	60, 100, 347, 184, 270, 238, 59, 289, 342, 326,
	228, 365, 173, 406, 397, 381, 129, 231, 228, 366,
	412, 408, 396, 236, 380, 255, 256, 257, 258, 259,
	341, 287, 216, 286, 243, 237, 249, 117, 215, 364,
	359, 314, 250, 268, 214, 284, 213, 248, 184, 356,
	312, 212, 198, 276, 267, 185, 273, 271, 234, 228,
	109, 182, 266, 282, 269, 101, 2, 1, 363, 196,
	275, 334, 228, 146, 116, 293, 294, 278, 179, 83,
	82, 299, 300, 279, 228, 81, 288, 301, 218, 150,
	399, 348, 306, 324, 298, 323, 290, 303, 7, 0,
	318, 0, 0, 0, 0, 0, 0, 309, 0, 0,
	0, 0, 322, 0, 0, 0, 0, 325, 0, 0,
	228, 0, 332, 0, 0, 0, 0, 337, 0, 339,
	336, 345, 336, 343, 344, 0, 338, 0, 0, 293,
	352, 228, 346, 0, 331, 0, 349, 0, 0, 0,
	0, 0, 0, 0, 303, 353, 0, 0, 362, 0,
	0, 0, 368, 0, 371, 0, 375, 0, 191, 0,
	369, 0, 0, 0, 0, 378, 0, 0, 0, 0,
	0, 0, 0, 385, 0, 383, 0, 384, 0, 382,
	0, 0, 0, 0, 390, 0, 0, 0, 0, 0,
	0, 394, 395, 392, 0, 0, 398, 0, 402, 403,
	0, 0, 0, 0, 0, 0, 0, 0, 404, 0,
	407, 0, 0, 411, 0, 0, 336, 0, 0, 416,
	410, 28, 38, 17, 0, 19, 0, 18, 0, 0,
	36, 10, 11, 40, 14, 21, 9, 44, 30, 15,
	16, 12, 45, 0, 20, 41, 42, 43, 48, 47,
	51, 49, 52, 53, 57, 54, 55, 56, 335, 50,
	26, 25, 46, 23, 39, 24, 0, 0, 0, 0,
	0, 34, 35, 0, 0, 0, 107, 0, 0, 0,
	0, 0, 48, 47, 51, 49, 52, 53, 57, 54,
	55, 56, 0, 50, 0, 0, 46, 31, 0, 0,
	0, 33, 32, 0, 0, 5, 29, 0, 13, 0,
	0, 22, 0, 37, 28, 38, 17, 0, 19, 0,
	18, 0, 0, 36, 10, 11, 40, 14, 21, 9,
	44, 30, 15, 16, 12, 45, 0, 20, 41, 42,
	43, 48, 47, 51, 49, 52, 53, 57, 54, 55,
	56, 377, 50, 26, 25, 46, 23, 39, 24, 0,
	0, 0, 0, 0, 34, 35, 0, 0, 0, 107,
	0, 0, 0, 0, 0, 48, 47, 51, 49, 52,
	53, 57, 54, 55, 56, 0, 50, 0, 0, 46,
	31, 0, 0, 0, 33, 32, 0, 0, 0, 29,
	0, 13, 0, 0, 22, 0, 37, 28, 38, 17,
	304, 19, 0, 18, 0, 0, 36, 0, 0, 40,
	14, 21, 0, 44, 30, 15, 16, 105, 45, 0,
	20, 41, 42, 43, 48, 47, 51, 49, 52, 53,
	57, 54, 55, 56, 305, 50, 26, 25, 46, 23,
	39, 24, 0, 107, 0, 0, 0, 34, 35, 48,
	47, 51, 49, 52, 53, 57, 54, 55, 56, 0,
	50, 0, 0, 46, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 31, 0, 0, 0, 33, 32, 0,
	0, 0, 29, 0, 13, 0, 0, 22, 0, 37,
	28, 38, 17, 350, 19, 0, 18, 0, 0, 36,
	0, 0, 40, 14, 21, 0, 44, 30, 15, 16,
	105, 45, 0, 20, 41, 42, 43, 48, 47, 51,
	49, 52, 53, 57, 54, 55, 56, 351, 50, 26,
	25, 46, 23, 39, 24, 0, 0, 0, 0, 0,
	34, 35, 119, 118, 122, 120, 123, 124, 128, 125,
	126, 127, 0, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 31, 0, 0, 0,
	33, 32, 0, 0, 0, 29, 0, 13, 0, 0,
	22, 0, 37, 28, 38, 17, 226, 19, 0, 18,
	0, 0, 36, 0, 0, 40, 14, 21, 0, 44,
	30, 15, 16, 105, 45, 0, 20, 41, 42, 43,
	48, 47, 51, 49, 52, 53, 57, 54, 55, 56,
	227, 50, 26, 25, 46, 23, 39, 24, 0, 0,
	0, 0, 0, 34, 35, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 31,
	0, 0, 0, 33, 32, 0, 0, 0, 29, 0,
	13, 0, 0, 22, 0, 37, 28, 38, 17, 291,
	19, 0, 18, 0, 0, 36, 0, 0, 40, 14,
	21, 0, 44, 30, 15, 16, 105, 45, 0, 20,
	41, 42, 43, 48, 47, 51, 49, 52, 53, 57,
	54, 55, 56, 292, 50, 26, 25, 46, 23, 39,
	24, 0, 0, 176, 0, 0, 34, 35, 0, 0,
	0, 177, 0, 0, 0, 0, 0, 119, 118, 122,
	120, 123, 124, 128, 125, 126, 127, 0, 121, 0,
	0, 175, 31, 0, 0, 0, 33, 32, 28, 38,
	17, 29, 19, 13, 18, 0, 22, 36, 37, 0,
	40, 14, 21, 0, 44, 30, 15, 16, 105, 45,
	0, 20, 41, 42, 43, 48, 47, 51, 49, 52,
	53, 57, 54, 55, 56, 178, 50, 26, 25, 46,
	23, 39, 24, 0, 0, 0, 0, 0, 34, 35,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 31, 0, 0, 0, 33, 32,
	0, 0, 0, 29, 180, 13, 0, 0, 22, 0,
	37, 28, 38, 17, 0, 19, 0, 18, 0, 0,
	36, 0, 0, 40, 14, 21, 0, 44, 30, 15,
	16, 105, 45, 0, 20, 41, 42, 43, 48, 47,
	51, 49, 52, 53, 57, 54, 55, 56, 0, 50,
	26, 25, 46, 23, 39, 24, 0, 0, 0, 0,
	0, 34, 35, 0, 0, 0, 107, 0, 0, 0,
	0, 0, 48, 47, 51, 49, 52, 53, 57, 54,
	55, 56, 0, 50, 0, 0, 46, 31, 0, 0,
	0, 33, 32, 28, 203, 17, 29, 19, 13, 18,
	0, 22, 36, 37, 147, 40, 14, 21, 0, 44,
	30, 15, 16, 105, 45, 0, 20, 41, 42, 43,
	48, 47, 51, 49, 52, 53, 57, 54, 55, 56,
	144, 50, 26, 25, 46, 23, 39, 24, 0, 0,
	0, 0, 0, 34, 35, 0, 0, 0, 80, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 31,
	0, 0, 0, 33, 32, 0, 0, 0, 29, 0,
	13, 0, 0, 22, 0, 202, 90, 91, 92, 93,
	95, 84, 85, 0, 80, 94, 96, 97, 98, 99,
	62, 0, 89, 88, 68, 70, 69, 73, 75, 74,
	76, 77, 79, 78, 71, 72, 64, 65, 66, 67,
	0, 0, 0, 63, 86, 0, 87, 310, 61, 0,
	311, 60, 90, 91, 92, 93, 95, 84, 85, 0,
	0, 94, 96, 97, 98, 99, 62, 80, 89, 88,
	68, 70, 69, 73, 75, 74, 76, 77, 79, 78,
	71, 72, 64, 65, 66, 67, 0, 0, 0, 63,
	86, 0, 87, 0, 61, 0, 0, 60, 217, 0,
	0, 0, 0, 0, 0, 90, 91, 92, 93, 95,
	84, 85, 0, 80, 94, 96, 97, 98, 99, 62,
	0, 89, 88, 68, 70, 69, 73, 75, 74, 76,
	77, 79, 78, 71, 72, 64, 65, 66, 67, 0,
	0, 0, 63, 86, 0, 87, 393, 61, 0, 0,
	60, 90, 91, 92, 93, 95, 84, 85, 0, 80,
	94, 96, 97, 98, 99, 62, 0, 89, 88, 68,
	70, 69, 73, 75, 74, 76, 77, 79, 78, 71,
	72, 64, 65, 66, 67, 0, 0, 0, 63, 86,
	0, 87, 386, 61, 0, 0, 60, 90, 91, 92,
	93, 95, 84, 85, 0, 80, 94, 96, 97, 98,
	99, 62, 0, 89, 88, 68, 70, 69, 73, 75,
	74, 76, 77, 79, 78, 71, 72, 64, 65, 66,
	67, 0, 0, 0, 63, 86, 0, 87, 373, 61,
	0, 0, 60, 90, 91, 92, 93, 95, 84, 85,
	0, 80, 94, 96, 97, 98, 99, 62, 0, 89,
	88, 68, 70, 69, 73, 75, 74, 76, 77, 79,
	78, 71, 72, 64, 65, 66, 67, 0, 0, 0,
	63, 86, 0, 87, 367, 61, 0, 0, 60, 90,
	91, 92, 93, 95, 84, 85, 0, 80, 94, 96,
	97, 98, 99, 62, 0, 89, 88, 68, 70, 69,
	73, 75, 74, 76, 77, 79, 78, 71, 72, 64,
	65, 66, 67, 0, 0, 0, 63, 86, 0, 87,
	0, 61, 0, 355, 60, 90, 91, 92, 93, 95,
	84, 85, 0, 80, 94, 96, 97, 98, 99, 62,
	0, 89, 88, 68, 70, 69, 73, 75, 74, 76,
	77, 79, 78, 71, 72, 64, 65, 66, 67, 0,
	0, 0, 63, 86, 0, 87, 321, 61, 0, 0,
	60, 90, 91, 92, 93, 95, 84, 85, 0, 80,
	94, 96, 97, 98, 99, 62, 0, 89, 88, 68,
	70, 69, 73, 75, 74, 76, 77, 79, 78, 71,
	72, 64, 65, 66, 67, 0, 0, 0, 63, 86,
	0, 87, 296, 61, 0, 0, 60, 90, 91, 92,
	93, 95, 84, 85, 0, 80, 94, 96, 97, 98,
	99, 62, 0, 89, 88, 68, 70, 69, 73, 75,
	74, 76, 77, 79, 78, 71, 72, 64, 65, 66,
	67, 0, 0, 0, 63, 86, 0, 87, 274, 61,
	0, 0, 60, 90, 91, 92, 93, 95, 84, 85,
	0, 80, 94, 96, 97, 98, 99, 62, 0, 89,
	88, 68, 70, 69, 73, 75, 74, 76, 77, 79,
	78, 71, 72, 64, 65, 66, 67, 0, 0, 0,
	63, 86, 0, 87, 262, 61, 0, 0, 60, 90,
	91, 92, 93, 95, 84, 85, 0, 80, 94, 96,
	97, 98, 99, 62, 0, 89, 88, 68, 70, 69,
	73, 75, 74, 76, 77, 79, 78, 71, 72, 64,
	65, 66, 67, 0, 0, 0, 63, 86, 0, 87,
	253, 61, 0, 0, 60, 90, 91, 92, 93, 95,
	84, 85, 0, 80, 94, 96, 97, 98, 99, 62,
	0, 89, 88, 68, 70, 69, 73, 75, 74, 76,
	77, 79, 78, 71, 72, 64, 65, 66, 67, 0,
	0, 0, 63, 86, 0, 87, 0, 61, 0, 252,
	60, 90, 91, 92, 93, 95, 84, 85, 0, 80,
	94, 96, 97, 98, 99, 62, 0, 89, 88, 68,
	70, 69, 73, 75, 74, 76, 77, 79, 78, 71,
	72, 64, 65, 66, 67, 0, 0, 0, 63, 86,
	0, 87, 251, 61, 0, 0, 60, 90, 91, 92,
	93, 95, 84, 85, 0, 80, 94, 96, 97, 98,
	99, 62, 0, 89, 88, 68, 70, 69, 73, 75,
	74, 76, 77, 79, 78, 71, 72, 64, 65, 66,
	67, 0, 0, 0, 63, 86, 0, 87, 229, 61,
	0, 0, 60, 90, 91, 92, 93, 95, 84, 85,
	0, 80, 94, 96, 97, 98, 99, 62, 0, 89,
	88, 68, 70, 69, 73, 75, 74, 76, 77, 79,
	78, 71, 72, 64, 65, 66, 67, 0, 0, 0,
	63, 86, 0, 87, 200, 61, 0, 0, 60, 90,
	91, 92, 93, 95, 84, 85, 0, 80, 94, 96,
	97, 98, 99, 62, 0, 89, 88, 68, 70, 69,
	73, 75, 74, 76, 77, 79, 78, 71, 72, 64,
	65, 66, 67, 0, 0, 0, 63, 86, 0, 87,
	0, 61, 0, 0, 60, 90, 91, 92, 93, 95,
	84, 85, 0, 80, 94, 96, 97, 98, 99, 62,
	0, 89, 88, 68, 70, 69, 73, 75, 74, 76,
	77, 79, 78, 71, 72, 64, 65, 66, 67, 0,
	0, 0, 63, 247, 0, 87, 0, 61, 0, 0,
	60, 90, 91, 92, 93, 95, 84, 85, 0, 80,
	94, 96, 97, 98, 242, 62, 0, 89, 88, 68,
	70, 69, 73, 75, 74, 76, 77, 79, 78, 71,
	72, 64, 65, 66, 67, 0, 0, 0, 63, 86,
	0, 87, 0, 61, 0, 0, 60, 90, 91, 92,
	93, 95, 84, 85, 80, 0, 94, 96, 97, 98,
	99, 62, 0, 89, 88, 68, 70, 69, 73, 75,
	74, 76, 77, 79, 78, 71, 72, 64, 65, 66,
	67, 0, 0, 80, 63, 206, 0, 207, 0, 61,
	0, 0, 60, 0, 0, 0, 0, 84, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 70, 69, 73, 75, 74, 76, 77, 79, 78,
	71, 72, 64, 65, 66, 67, 84, 85, 80, 63,
	86, 0, 87, 0, 61, 0, 0, 60, 0, 0,
	0, 69, 73, 75, 74, 76, 77, 79, 78, 71,
	72, 64, 65, 66, 67, 0, 0, 80, 63, 86,
	0, 87, 0, 61, 0, 0, 60, 0, 0, 0,
	0, 84, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 73, 75, 74,
	76, 77, 79, 78, 71, 72, 64, 65, 66, 67,
	84, 85, 0, 63, 86, 0, 87, 0, 61, 0,
	0, 60, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 64, 65, 66, 67, 0,
	0, 0, 63, 86, 0, 87, 107, 61, 0, 0,
	60, 0, 48, 47, 51, 49, 52, 53, 57, 54,
	55, 56, 107, 50, 0, 0, 46, 0, 48, 47,
	51, 49, 52, 53, 57, 54, 55, 56, 107, 50,
	0, 0, 46, 0, 48, 47, 51, 49, 52, 53,
	57, 54, 55, 56, 0, 50, 0, 0, 46, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 115, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 113,
}

var yyPact = [...]int{
	-1000, -1000, 413, -1000, 413, -1000, 104, -1000, 1926, 98,
	-1000, -1000, 71, 413, 1053, 624, 95, -1000, 93, 91,
	2309, 2293, -1000, -1000, 717, -1000, -1000, 82, -1000, 1053,
	2277, 1053, 1053, 1053, 1053, 1053, 1053, -1000, -1000, -1000,
	1053, 79, 78, 73, 1087, 624, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1053, -1000, -1000, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
	1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
	1053, 1053, 1053, 1053, -1000, -1000, 912, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	960, 624, -1000, -40, 1926, 71, -1000, -1000, 624, 67,
	506, 1053, 66, -1000, -1000, 624, 1053, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1880, 1135, -1000, 92, 92, 92, 7, 7, 1926, 56,
	2064, 35, 1053, 1053, 1053, -1000, -1000, -1000, -1000, 1229,
	-1000, 1053, 27, 83, 83, 92, 92, 2109, 2183, 2138,
	2212, 2212, 72, 72, 72, 72, 72, 72, 72, 1926,
	1926, 1926, 1926, -1000, 55, -1000, -1000, -1000, 1053, 785,
	-1000, 1834, -53, -1000, -1000, 624, -1000, -54, 1053, -1000,
	113, -1000, 1926, -1000, 1053, 33, -72, -1000, 2018, 785,
	-1000, -2, 32, 30, 1972, -1000, 912, 785, -1000, 1788,
	1742, 1696, -1000, -1000, -1000, -1000, -1000, -1000, 1053, 1926,
	-1000, -1000, -1000, 1650, 25, -57, -1000, 54, 1926, -1000,
	624, -1000, 1053, 1926, 102, -1000, 21, -1000, 1604, -1000,
	-1000, 1053, 1053, 20, -1000, -1000, -1000, 912, 785, 53,
	19, -1000, 1053, -1000, 47, -1000, 45, -1000, -1000, 1926,
	129, 785, -1000, -1000, 878, 1053, -1000, 17, 1558, 16,
	1053, 1053, 413, 599, 624, -1000, 1926, -1000, -4, 14,
	-1000, -1000, 1183, -1000, -7, -1000, -32, -33, -41, 1053,
	12, -1000, 44, 1926, 1512, -1000, -1000, 413, -1000, 1926,
	1926, 186, 10, -58, -1000, 43, 42, -1000, -1000, 785,
	-1000, 1053, 447, 413, 447, 413, 168, -1000, 1926, -1000,
	1053, -1000, -1000, 100, -1000, -1000, -1000, -1000, 692, 1053,
	599, 9, 1466, -1000, -71, -1000, -1000, -42, -1000, -45,
	-46, 168, 180, -1000, -1000, 1420, -1000, 506, 5, 413,
	-1000, 41, 1374, 3, -1000, 1053, 2, 540, -1000, 1,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	413, -1000, 1053, -1000, -1000, 1328, -35, -1000, -1000, -36,
	-1000, -1000, 0, -1000, -1000, 1282, -1000, 413, 413, -1000,
	-1000, 413, -1000, -1000, -47, -49, -1000, -1000, -1000, -1000,
	-1000, -1000, 40, -1000, -1000, -1000, -37, -1000, 447, 413,
	-1000, -50, -1, -1000, -38, 413, -51, -1000,
}

var yyPgo = [...]int{
	0, 0, 4, 3, 10, 12, 1, 288, 20, 285,
	284, 283, 281, 280, 5, 9, 279, 278, 276, 275,
	270, 269, 268, 31, 16, 19, 24, 14, 264, 263,
	7, 202, 21, 2, 13, 11, 261, 259, 258, 257,
	256, 255, 251, 250, 248, 247, 246, 245, 244, 241,
	240, 239, 236, 235, 234, 231, 230, 228, 223, 222,
	221, 6, 220, 214, 212, 211, 210, 205, 204, 203,
	18,
}

var yyR1 = [...]int{
	0, 40, 39, 3, 3, 5, 5, 2, 2, 2,
	4, 4, 7, 7, 7, 7, 7, 41, 7, 1,
	1, 1, 1, 43, 1, 44, 1, 45, 1, 1,
	1, 46, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 47, 48, 1,
	1, 49, 50, 51, 1, 52, 53, 1, 54, 55,
	56, 1, 57, 58, 1, 59, 60, 1, 61, 61,
	33, 63, 64, 65, 66, 62, 67, 68, 69, 62,
	22, 23, 28, 24, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 14, 15, 8, 9, 10,
	10, 11, 12, 13, 19, 20, 16, 17, 18, 6,
	29, 35, 35, 35, 35, 36, 36, 26, 26, 26,
	26, 26, 26, 27, 27, 27, 27, 27, 27, 34,
	34, 70, 37, 37, 37, 32, 42, 42, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 38, 38, 38, 25, 25, 25, 25,
}

var yyR2 = [...]int{
	0, 0, 2, 0, 2, 0, 1, 1, 1, 2,
	1, 1, 1, 3, 4, 1, 1, 0, 3, 3,
	2, 2, 6, 0, 9, 0, 14, 0, 12, 7,
	10, 0, 7, 9, 2, 4, 4, 1, 1, 1,
	1, 1, 1, 2, 4, 8, 8, 3, 4, 4,
	4, 6, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 2, 3, 4, 4, 3, 2, 2, 2,
	2, 2, 1, 1, 1, 3, 3, 7, 6, 5,
	8, 5, 5, 3, 4, 6, 10, 0, 0, 6,
	4, 0, 0, 0, 12, 0, 0, 8, 0, 0,
	0, 12, 0, 0, 8, 0, 0, 8, 0, 2,
	0, 0, 0, 0, 0, 14, 0, 0, 0, 10,
	0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 1, 1, 0, 0, 0, 0,
	1, 0, 1, 1, 3, 1, 3, 0, 1, 1,
	3, 4, 6, 0, 1, 1, 3, 4, 6, 1,
	3, 3, 0, 1, 3, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3,
}

var yyChk = [...]int{
	-1000, -39, -40, -3, -2, 92, -4, -7, -1, 23,
	18, 19, 28, 95, 21, 26, 27, 10, 14, 12,
	31, 22, 98, 50, 52, 48, 47, -30, 8, 93,
	25, 84, 89, 88, 58, 59, 17, 100, 9, 51,
	20, 32, 33, 34, 24, 29, 49, 36, 35, 38,
	46, 37, 39, 40, 42, 43, 44, 41, -3, 92,
	98, 95, 67, 90, 83, 84, 85, 86, 71, 73,
	72, 81, 82, 74, 76, 75, 77, 78, 80, 79,
	15, -19, -20, -21, 58, 59, 91, 93, 70, 69,
	53, 54, 55, 56, 62, 57, 63, 64, 65, 66,
	93, -41, 93, -3, -1, 28, -30, 29, 93, -43,
	93, 93, -30, 93, -30, 93, -28, -31, 36, 35,
	38, 46, 37, 39, 40, 42, 43, 44, 41, 93,
	-1, 93, -30, -1, -1, -1, -1, -1, -1, -30,
	-1, 93, 93, 93, 93, -30, -29, 67, -30, -1,
	-16, -8, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -31, -25, 49, 21, 29, 93, -22,
	94, -1, -42, -32, -30, -47, 96, -30, 93, -5,
	-30, -4, -1, 93, -23, -30, -37, -70, -1, -23,
	94, -30, 100, 9, -1, 93, 91, 93, 94, -1,
	-1, -1, -49, -52, -54, -57, -59, 99, -17, -1,
	-14, -14, 93, -1, -26, -34, 11, 45, -1, 94,
	97, -32, 97, -1, -44, 15, -8, -23, -1, 94,
	99, 97, 66, -26, 94, 94, 94, 91, -23, -25,
	-26, 94, 97, 94, -6, -6, -6, -6, -6, -1,
	-15, -24, 94, 94, 97, 93, -32, -48, -1, -8,
	92, -45, 94, -46, 94, -70, -1, 94, -25, -26,
	93, 94, -1, 93, -53, 93, -58, -60, -18, 68,
	-26, 11, 45, -1, -1, 94, 94, 94, -10, -1,
	-1, -2, -27, -34, 11, 45, -30, 94, 94, -24,
	94, 97, -50, 95, -55, 95, 95, 96, -1, 94,
	93, 94, -2, -9, -11, -14, 13, 94, 97, 93,
	93, -26, -1, -35, -36, 11, -30, -3, -35, -3,
	-61, -62, 30, -14, -14, -1, -15, 92, -12, -15,
	11, 45, -1, -27, 94, 97, -51, 97, 96, -56,
	96, 96, -61, -38, 49, 21, 29, 94, -14, -5,
	94, -2, 93, 94, 94, -1, 94, 11, -30, 94,
	-63, -67, -15, -2, -14, -1, 94, 95, 95, -33,
	-33, 94, -15, 94, -3, -3, -64, -68, -2, -13,
	96, 96, -6, -6, -15, 93, -69, -14, -65, 95,
	-35, -3, -66, 96, 94, 95, -3, 96,
}

var yyDef = [...]int{
	1, -2, 3, 2, 3, 7, 8, 10, 11, 12,
	15, 16, 17, 3, 0, 0, 0, 23, 0, 0,
	0, 0, 132, 37, 38, 39, 40, 41, 42, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 83, 84,
	0, 0, 0, 0, 0, 210, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 4, 9,
	0, 166, 157, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 78, 0, 130, 164, 165,
	145, 146, 147, 148, 149, 150, 151, 152, 153, 154,
	0, 0, 97, 0, 20, 0, 21, 210, 0, 0,
	5, 0, 0, 131, 34, 0, 192, 43, 134, 135,
	136, 137, 138, 139, 140, 141, 142, 143, 144, 131,
	0, 0, 52, 63, 64, 72, 79, 80, 81, 41,
	0, 0, 0, 0, 0, -2, -2, 170, 115, 0,
	167, 0, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 62, -2, -2, -2, -2, -2, -2, -2, 73,
	155, 155, 76, 85, 86, 214, 215, 216, 0, 177,
	13, 0, 18, 196, 195, 0, 19, 0, 0, 25,
	41, 6, 157, 131, 0, 0, 0, 193, 0, 177,
	47, 41, 82, 83, 0, 131, 0, 130, 93, 0,
	0, 0, 169, 169, 169, 169, 169, 44, 0, 156,
	74, 75, 133, 0, 0, 178, 179, 0, 189, 14,
	0, 98, 0, 157, 0, 27, 0, 31, 0, 35,
	36, 0, 0, 0, 48, 49, 50, 0, 177, 86,
	0, 94, 0, 100, 0, 106, 0, 113, 116, 168,
	0, 177, 217, 92, 0, 0, 197, 0, 0, 0,
	159, 0, 0, 183, 0, 194, 191, 91, 86, 0,
	133, 89, 0, 102, 0, 109, 0, 0, 0, 0,
	0, 180, 0, 190, 0, 99, 22, 0, 158, 160,
	161, 155, 0, 184, 185, 0, 0, 51, 88, 177,
	95, 0, 171, 3, 171, 3, 118, 155, 155, 87,
	0, 181, 156, 0, 162, 29, 156, 32, 0, 0,
	183, 0, 0, 103, 172, 173, 175, 0, 110, 0,
	0, 118, 0, 45, 46, 0, 155, 5, 0, 0,
	186, 0, 0, 0, -2, 0, 0, 0, 107, 0,
	114, 117, 119, -2, 211, 212, 213, 182, 24, 156,
	0, 155, 0, 187, 33, 0, 0, 174, 176, 0,
	120, 120, 0, 156, 30, 0, 96, 3, 3, 122,
	127, 0, 163, 188, 0, 0, 169, 169, 156, 28,
	104, 111, 0, 128, 155, 123, 0, 26, 171, 3,
	124, 0, 0, 129, 0, 3, 0, 125,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 100, 90, 73, 3,
	93, 94, 85, 83, 97, 84, 91, 86, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 68, 92,
	3, 66, 3, 67, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 98, 3, 99, 72, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 95, 71, 96, 89,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 69, 70, 74, 75, 76, 77,
	78, 79, 80, 81, 82, 87, 88,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{
}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0:yypt+1]
//line gram.y:69
		{
					code2(funcinst(I_STRINGPUSH), strinst(Infile));
					code2(funcinst(I_CONSTANT),numinst(Lineno));
					code(funcinst(I_PUSHINFO));
					}
	case 2:
		yyDollar = yyS[yypt-2:yypt+1]
//line gram.y:74
		{
					code(funcinst(I_POPINFO));
					code(Stopcode);
					}
	case 3:
		yyDollar = yyS[yypt-0:yypt+1]
//line gram.y:79
		{ yyVAL.in = futureinstnode(); }
	case 5:
		yyDollar = yyS[yypt-0:yypt+1]
//line gram.y:82
		{ yyVAL.in = futureinstnode(); }
	case 7:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:85
		{ yyVAL.in = futureinstnode(); }
	case 11:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:90
		{ code(funcinst(I_POPIGNORE)); }
	case 12:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:91
		{ yyerror("'return' statement needs parentheses!");
				  	YYABORT;
					/*NOTREACHED*/ }
	case 13:
		yyDollar = yyS[yypt-3:yypt+1]
//line gram.y:94
		{ defnonly("return");
					  yyVAL.in = code(funcinst(I_RETURN)); }
	case 14:
		yyDollar = yyS[yypt-4:yypt+1]
//line gram.y:96
		{ defnonly("return");
					  yyVAL.in=yyDollar[3].in; code(funcinst(I_RETURNV)); }
	case 15:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:98
		{
					looponly("break");
					yyVAL.in = code2(numinst(IBREAK),Stopcode);
					looppatch(yyVAL.in);
					}
	case 16:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:103
		{
					looponly("continue");
					yyVAL.in = code2(numinst(ICONTINUE),Stopcode);
					looppatch(yyVAL.in);
					}
	case 17:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:108
		{ yyVAL.in=futureinstnode(); Globaldecl=1; }
	case 18:
		yyDollar = yyS[yypt-3:yypt+1]
//line gram.y:108
		{Globaldecl=0;}
	case 19:
		yyDollar = yyS[yypt-3:yypt+1]
//line gram.y:110
		{ yyVAL.in = yyDollar[2].in; fakeval(); }
	case 20:
		yyDollar = yyS[yypt-2:yypt+1]
//line gram.y:113
		{
			  if ( recodedelete(yyDollar[2].in,code(funcinst(I_DELETEIT))) != 0 ) {
				yyerror("Bad 'delete' statement!");
				YYABORT;
			  }
			  yyVAL.in = yyDollar[2].in;
			fakeval();
			}
	case 21:
		yyDollar = yyS[yypt-2:yypt+1]
//line gram.y:121
		{
			yyVAL.in = code2(funcinst(I_READONLYIT),syminst(yyDollar[2].sym));
			fakeval();
			}
	case 22:
		yyDollar = yyS[yypt-6:yypt+1]
//line gram.y:125
		{
			yyVAL.in = code2(funcinst(I_ONCHANGEIT),syminst(yyDollar[3].sym));
			fakeval();
			}
	case 23:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:129
		{loopstart();}
	case 24:
		yyDollar = yyS[yypt-9:yypt+1]
//line gram.y:129
		{
			STUFFCODE(yyDollar[5].in,1, instnodeinst(yyDollar[9].in));	/* cond fails */
			STUFFCODE(yyDollar[8].in,1, instnodeinst(yyDollar[4].in));
			yyVAL.in = yyDollar[4].in;
			loopend(yyDollar[4].in,yyDollar[9].in);
			fakeval();
			}
	case 25:
		yyDollar = yyS[yypt-3:yypt+1]
//line gram.y:137
		{loopstart();}
	case 26:
		yyDollar = yyS[yypt-14:yypt+1]
//line gram.y:138
		{
	
			STUFFCODE(yyDollar[7].in,1, instnodeinst(yyDollar[12].in));	/* cond succeeds */
			STUFFCODE(yyDollar[7].in,2, instnodeinst(yyDollar[14].in));	/* cond fails */
			STUFFCODE(yyDollar[10].in,1, instnodeinst(yyDollar[6].in));
			STUFFCODE(yyDollar[13].in,1, instnodeinst(yyDollar[9].in));
			yyVAL.in = yyDollar[3].in;
			loopend(yyDollar[9].in,yyDollar[14].in);
			fakeval();
			}
	case 27:
		yyDollar = yyS[yypt-4:yypt+1]
//line gram.y:149
		{loopstart();}
	case 28:
		yyDollar = yyS[yypt-12:yypt+1]
//line gram.y:149
		{
			STUFFCODE(yyDollar[7].in,1, syminst(yyDollar[3].sym));
			STUFFCODE(yyDollar[7].in,2, instnodeinst(yyDollar[12].in));
			STUFFCODE(yyDollar[11].in,1, instnodeinst(yyDollar[8].in));
			yyVAL.in = yyDollar[6].in;
			loopend(yyDollar[8].in,yyDollar[12].in);
			fakeval();
			}
	case 29:
		yyDollar = yyS[yypt-7:yypt+1]
//line gram.y:158
		{		/* else-less if */
			STUFFCODE(yyDollar[4].in,1, instnodeinst(yyDollar[7].in));	/* cond fails */
			yyVAL.in = yyDollar[3].in;
			fakeval();
			}
	case 30:
		yyDollar = yyS[yypt-10:yypt+1]
//line gram.y:163
		{ /* if with else */
			STUFFCODE(yyDollar[4].in,1, instnodeinst(yyDollar[9].in));	/* cond fails */
			STUFFCODE(yyDollar[8].in,1, instnodeinst(yyDollar[10].in));
			yyVAL.in = yyDollar[3].in;
			fakeval();
			}
	case 31:
		yyDollar = yyS[yypt-4:yypt+1]
//line gram.y:170
		{ code2(funcinst(I_CONSTANT),numinst(0)); }
	case 32:
		yyDollar = yyS[yypt-7:yypt+1]
//line gram.y:172
		{
					Symbolp s = yyDollar[2].sym;
					if ( !isglobal(s) && !(s->flags & S_SEEN))
						s = forceglobal(s);
					STUFFCODE(yyDollar[4].in,1, syminst(s));
					code2(funcinst(I_CALLFUNC),syminst(s));
					yyVAL.in = yyDollar[4].in;
					}
	case 33:
		yyDollar = yyS[yypt-9:yypt+1]
//line gram.y:181
		{
					Symbolp s = yyDollar[6].sym;
					if ( !isglobal(s) && !(s->flags & S_SEEN))
						s = forceglobal(s);
					STUFFCODE(yyDollar[3].in,1, syminst(s));
					code2(funcinst(I_CALLFUNC),syminst(s));
					yyVAL.in = yyDollar[3].in;
					}
	case 34:
		yyDollar = yyS[yypt-2:yypt+1]
//line gram.y:189
		{
			yyVAL.in = code2(funcinst(I_UNDEFINE),syminst(yyDollar[2].sym));
			fakeval();
			}
	case 35:
		yyDollar = yyS[yypt-4:yypt+1]
//line gram.y:193
		{
			yyVAL.in = code2(funcinst(I_UNDEFINE),syminst(yyDollar[3].sym));
			fakeval();
			}
	case 36:
		yyDollar = yyS[yypt-4:yypt+1]
//line gram.y:197
		{
			code2(funcinst(I_ARRAY),numinst(yyDollar[3].num));
			// $$ = $2;
		yyVAL.in = yyDollar[2].in;
			}
	case 37:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:202
		{ yyVAL.in = code2(funcinst(I_CONSTANT), numinst(yyDollar[1].val)); }
	case 38:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:203
		{ yyVAL.in = code2(funcinst(I_DBLPUSH), dblinst(yyDollar[1].dbl)); }
	case 39:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:204
		{ yyVAL.in = code2(funcinst(I_STRINGPUSH), strinst(yyDollar[1].str)); }
	case 40:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:205
		{ yyVAL.in = code2(funcinst(I_PHRASEPUSH), phrinst(yyDollar[1].phr)); }
	case 41:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:206
		{ yyVAL.in = code2(funcinst(I_VAREVAL), syminst(yyDollar[1].sym)); }
	case 42:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:207
		{ yyVAL.in = code(funcinst(I_QMARK));
			       if ( Inselect == 0 ) {
					yyerror("\"?\" is only allowed in select expressions!");
					YYABORT;
					/*NOTREACHED*/
			       }
			     }
	case 43:
		yyDollar = yyS[yypt-2:yypt+1]
//line gram.y:214
		{ sprintf(Msg1,
		"Floating point number before '%s'?  Use parens around integer!", dotstr(yyDollar[2].sym->stype));
					  yyerror(Msg1);
					  YYABORT;
					  /*NOTREACHED*/
					}
	case 44:
		yyDollar = yyS[yypt-4:yypt+1]
//line gram.y:220
		{ code(funcinst(I_ARREND)); }
	case 45:
		yyDollar = yyS[yypt-8:yypt+1]
//line gram.y:221
		{
				STUFFCODE(yyDollar[4].in,1, instnodeinst(yyDollar[8].in));
				STUFFCODE(yyDollar[6].in,1, instnodeinst(yyDollar[4].in));
				Inselect--;
				}
	case 46:
		yyDollar = yyS[yypt-8:yypt+1]
//line gram.y:226
		{
				STUFFCODE(yyDollar[3].in,1, instnodeinst(yyDollar[7].in));	/* false */
				STUFFCODE(yyDollar[5].in,1, instnodeinst(yyDollar[8].in));
				}
	case 47:
		yyDollar = yyS[yypt-3:yypt+1]
//line gram.y:230
		{ yyVAL.in = yyDollar[2].in; }
	case 48:
		yyDollar = yyS[yypt-4:yypt+1]
//line gram.y:231
		{ yyVAL.in = code2(funcinst(I_DEFINED),syminst(yyDollar[3].sym)); }
	case 49:
		yyDollar = yyS[yypt-4:yypt+1]
//line gram.y:232
		{ yyVAL.in = code(funcinst(I_CURROBJDEFINED)); }
	case 50:
		yyDollar = yyS[yypt-4:yypt+1]
//line gram.y:233
		{ yyVAL.in = code(funcinst(I_REALOBJDEFINED)); }
	case 51:
		yyDollar = yyS[yypt-6:yypt+1]
//line gram.y:234
		{
					code(funcinst(I_OBJDEFINED));
					yyVAL.in = yyDollar[3].in;
					}
	case 52:
		yyDollar = yyS[yypt-2:yypt+1]
//line gram.y:238
		{ yyVAL.in = code2(funcinst(I_DEFINED),syminst(yyDollar[2].sym)); }
	case 53:
		yyDollar = yyS[yypt-3:yypt+1]
//line gram.y:239
		{ code(funcinst(I_MODULO)); }
	case 54:
		yyDollar = yyS[yypt-3:yypt+1]
//line gram.y:240
		{ code(funcinst(I_ADDCODE)); }
	case 55:
		yyDollar = yyS[yypt-3:yypt+1]
//line gram.y:241
		{ code(funcinst(I_SUBCODE)); }
	case 56:
		yyDollar = yyS[yypt-3:yypt+1]
//line gram.y:242
		{ code(funcinst(I_MULCODE)); }
	case 57:
		yyDollar = yyS[yypt-3:yypt+1]
//line gram.y:243
		{ code(funcinst(I_DIVCODE)); }
	case 58:
		yyDollar = yyS[yypt-3:yypt+1]
//line gram.y:244
		{ code(funcinst(I_PAR)); }
	case 59:
		yyDollar = yyS[yypt-3:yypt+1]
//line gram.y:245
		{ code(funcinst(I_AMP)); }
	case 60:
		yyDollar = yyS[yypt-3:yypt+1]
//line gram.y:246
		{ code(funcinst(I_XORCODE)); }
	case 61:
		yyDollar = yyS[yypt-3:yypt+1]
//line gram.y:247
		{ code(funcinst(I_LSHIFT)); }
	case 62:
		yyDollar = yyS[yypt-3:yypt+1]
//line gram.y:248
		{ code(funcinst(I_RIGHTSHIFT)); }
	case 63:
		yyDollar = yyS[yypt-2:yypt+1]
//line gram.y:249
		{ yyVAL.in=yyDollar[2].in; code(funcinst(I_NEGATE)); }
	case 64:
		yyDollar = yyS[yypt-2:yypt+1]
//line gram.y:250
		{ yyVAL.in=yyDollar[2].in; code(funcinst(I_TILDA)); }
	case 65:
		yyDollar = yyS[yypt-3:yypt+1]
//line gram.y:251
		{ code(funcinst(I_GT)); }
	case 66:
		yyDollar = yyS[yypt-3:yypt+1]
//line gram.y:252
		{ code(funcinst(I_LT)); }
	case 67:
		yyDollar = yyS[yypt-3:yypt+1]
//line gram.y:253
		{ code(funcinst(I_GE)); }
	case 68:
		yyDollar = yyS[yypt-3:yypt+1]
//line gram.y:254
		{ code(funcinst(I_LE)); }
	case 69:
		yyDollar = yyS[yypt-3:yypt+1]
//line gram.y:255
		{ code(funcinst(I_EQ)); }
	case 70:
		yyDollar = yyS[yypt-3:yypt+1]
//line gram.y:256
		{ code(funcinst(I_REGEXEQ)); }
	case 71:
		yyDollar = yyS[yypt-3:yypt+1]
//line gram.y:257
		{ code(funcinst(I_NE)); }
	case 72:
		yyDollar = yyS[yypt-2:yypt+1]
//line gram.y:258
		{ code(funcinst(I_NOT)); yyVAL.in=yyDollar[2].in; }
	case 73:
		yyDollar = yyS[yypt-3:yypt+1]
//line gram.y:259
		{ code(funcinst(I_INCOND)); }
	case 74:
		yyDollar = yyS[yypt-4:yypt+1]
//line gram.y:260
		{ STUFFCODE(yyDollar[2].in,1, instnodeinst(yyDollar[4].in)); }
	case 75:
		yyDollar = yyS[yypt-4:yypt+1]
//line gram.y:261
		{ STUFFCODE(yyDollar[2].in,1, instnodeinst(yyDollar[4].in)); }
	case 76:
		yyDollar = yyS[yypt-3:yypt+1]
//line gram.y:263
		{ recodeassign ( yyDollar[1].in, yyDollar[2].in ); }
	case 77:
		yyDollar = yyS[yypt-2:yypt+1]
//line gram.y:264
		{ recodeassign ( yyDollar[1].in, code(numinst(POSTINC)) );}
	case 78:
		yyDollar = yyS[yypt-2:yypt+1]
//line gram.y:265
		{ recodeassign ( yyDollar[1].in, code(numinst(POSTDEC)) );}
	case 79:
		yyDollar = yyS[yypt-2:yypt+1]
//line gram.y:266
		{ yyVAL.in = yyDollar[2].in; recodeassign ( yyDollar[2].in, code(numinst(INC)) );}
	case 80:
		yyDollar = yyS[yypt-2:yypt+1]
//line gram.y:267
		{ yyVAL.in = yyDollar[2].in; recodeassign ( yyDollar[2].in, code(numinst(DEC)) );}
	case 81:
		yyDollar = yyS[yypt-2:yypt+1]
//line gram.y:268
		{ yyVAL.in = yyDollar[2].in; code(funcinst(I_EVAL)); }
	case 82:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:269
		{ yyVAL.in = code(funcinst(I_ECURROBJEVAL)); }
	case 83:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:270
		{ yyVAL.in = code(funcinst(I_EREALOBJEVAL)); }
	case 84:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:271
		{ yyVAL.in = code2(funcinst(I_CONSTOBJEVAL),numinst(yyDollar[1].val)); }
	case 85:
		yyDollar = yyS[yypt-3:yypt+1]
//line gram.y:272
		{ code2(funcinst(I_DOT),numinst(yyDollar[3].sym->stype));}
	case 86:
		yyDollar = yyS[yypt-3:yypt+1]
//line gram.y:273
		{ code(funcinst(I_OBJVAREVAL)); }
	case 87:
		yyDollar = yyS[yypt-7:yypt+1]
//line gram.y:274
		{
				code2(funcinst(I_OBJCALLFUNC),syminst(NULL));
				}
	case 88:
		yyDollar = yyS[yypt-6:yypt+1]
//line gram.y:277
		{
					Symbolp s = yyDollar[2].sym;
					if ( !isglobal(s) && !(s->flags & S_SEEN))
						s = forceglobal(s);
					STUFFCODE(yyDollar[4].in,1, syminst(s));
					code2(funcinst(I_TASK),syminst(s));
					yyVAL.in = yyDollar[4].in;
					}
	case 89:
		yyDollar = yyS[yypt-5:yypt+1]
//line gram.y:285
		{
				yyVAL.in=yyDollar[2].in; code2(funcinst(I_TASK),syminst(NULL));
				}
	case 90:
		yyDollar = yyS[yypt-8:yypt+1]
//line gram.y:288
		{
				yyVAL.in=yyDollar[2].in; code2(funcinst(I_TASK),syminst(NULL));
				}
	case 91:
		yyDollar = yyS[yypt-5:yypt+1]
//line gram.y:291
		{
					Symbolp s = yyDollar[1].sym;
					if ( !isglobal(s) && !(s->flags & S_SEEN))
						s = forceglobal(s);
					STUFFCODE(yyDollar[3].in,1, syminst(s));
					code2(funcinst(I_CALLFUNC),syminst(s));
					yyVAL.in=yyDollar[3].in;
					}
	case 92:
		yyDollar = yyS[yypt-5:yypt+1]
//line gram.y:299
		{
				code2(funcinst(I_CALLFUNC),syminst(NULL));
				}
	case 93:
		yyDollar = yyS[yypt-3:yypt+1]
//line gram.y:302
		{
				yyVAL.in = code(funcinst(I_NARGS));
				}
	case 94:
		yyDollar = yyS[yypt-4:yypt+1]
//line gram.y:305
		{
				code(funcinst(I_TYPEOF));
				yyVAL.in = yyDollar[3].in;
				}
	case 95:
		yyDollar = yyS[yypt-6:yypt+1]
//line gram.y:309
		{
				code(funcinst(I_XY2));
				yyVAL.in = yyDollar[3].in;
				}
	case 96:
		yyDollar = yyS[yypt-10:yypt+1]
//line gram.y:313
		{
				code(funcinst(I_XY4));
				yyVAL.in = yyDollar[3].in;
				}
	case 97:
		yyDollar = yyS[yypt-2:yypt+1]
//line gram.y:317
		{ Globaldecl=1; }
	case 98:
		yyDollar = yyS[yypt-4:yypt+1]
//line gram.y:317
		{Globaldecl=0;}
	case 99:
		yyDollar = yyS[yypt-6:yypt+1]
//line gram.y:317
		{
				yyVAL.in = code2(funcinst(I_VAREVAL),syminst(yyDollar[4].sym));
				}
	case 100:
		yyDollar = yyS[yypt-4:yypt+1]
//line gram.y:320
		{ yyVAL.in = code(funcinst(I_FUNCNAMED)); }
	case 101:
		yyDollar = yyS[yypt-2:yypt+1]
//line gram.y:322
		{startdef(yyDollar[2].sym);}
	case 102:
		yyDollar = yyS[yypt-5:yypt+1]
//line gram.y:324
		{ if (startparams()) YYABORT; }
	case 103:
		yyDollar = yyS[yypt-7:yypt+1]
//line gram.y:326
		{ endparams(yyDollar[4].in,yyDollar[7].num,yyDollar[2].sym); }
	case 104:
		yyDollar = yyS[yypt-12:yypt+1]
//line gram.y:327
		{
					code(funcinst(I_RETURN));
					patchlocals(yyDollar[4].in);
					enddef(yyDollar[2].sym);
					yyVAL.in = code2(funcinst(I_VAREVAL), syminst(yyDollar[2].sym));
					}
	case 105:
		yyDollar = yyS[yypt-2:yypt+1]
//line gram.y:334
		{startdef(yyDollar[2].sym);}
	case 106:
		yyDollar = yyS[yypt-4:yypt+1]
//line gram.y:336
		{ endparams(yyDollar[4].in,0,yyDollar[2].sym); /* 0 parameters */ }
	case 107:
		yyDollar = yyS[yypt-8:yypt+1]
//line gram.y:337
		{
					code(funcinst(I_RETURN));
					patchlocals(yyDollar[4].in);
					enddef(yyDollar[2].sym);
					yyVAL.in = code2(funcinst(I_VAREVAL), syminst(yyDollar[2].sym));
					}
	case 108:
		yyDollar = yyS[yypt-2:yypt+1]
//line gram.y:344
		{startdef(yyDollar[2].sym);}
	case 109:
		yyDollar = yyS[yypt-5:yypt+1]
//line gram.y:346
		{ if (startparams()) YYABORT; }
	case 110:
		yyDollar = yyS[yypt-7:yypt+1]
//line gram.y:348
		{ endparams(yyDollar[4].in,yyDollar[7].num,yyDollar[2].sym); }
	case 111:
		yyDollar = yyS[yypt-12:yypt+1]
//line gram.y:349
		{
					code(funcinst(I_RETURN));
					patchlocals(yyDollar[4].in);
					enddef(yyDollar[2].sym);
					yyVAL.in = code2(funcinst(I_VAREVAL), syminst(yyDollar[2].sym));
					}
	case 112:
		yyDollar = yyS[yypt-2:yypt+1]
//line gram.y:356
		{startdef(yyDollar[2].sym);}
	case 113:
		yyDollar = yyS[yypt-4:yypt+1]
//line gram.y:358
		{ endparams(yyDollar[4].in,0,yyDollar[2].sym);	/* 0 parameters */ }
	case 114:
		yyDollar = yyS[yypt-8:yypt+1]
//line gram.y:359
		{
					code(funcinst(I_RETURN));
					patchlocals(yyDollar[4].in);
					enddef(yyDollar[2].sym);
					yyVAL.in = code2(funcinst(I_VAREVAL), syminst(yyDollar[2].sym));
					}
	case 115:
		yyDollar = yyS[yypt-2:yypt+1]
//line gram.y:366
		{
					startclass(yyDollar[2].sym);
					}
	case 116:
		yyDollar = yyS[yypt-4:yypt+1]
//line gram.y:370
		{
					endparams(yyDollar[4].in,1,yyDollar[2].sym); /* 1 parameter, the o */
					/* Now start the code of the class function. */
					/* The number we push on the stack here is */
					/* a flag so I_CLASSINIT knows where the */
					/* method names end.  */
					code2(funcinst(I_STRINGPUSH),strinst(yyDollar[2].sym->name.u.str));
					Sawinit = 0;
					}
	case 117:
		yyDollar = yyS[yypt-8:yypt+1]
//line gram.y:379
		{
					if ( ! Sawinit )
						tprint("Warning, no 'init' method in class definition!\n");
	
					/* create code that will init a new object */
	
					code(funcinst(I_CLASSINIT));
	
					/* create code that calls the object's init */
					/* method.  Note that this assumes that */
					/* i_classinit() has already pushed the */
					/* function value, and the obj/obj/method */
					/* values onto the stack. */
	
					code2(funcinst(I_DOTDOTARG),numinst(0));
					code2(funcinst(I_CALLFUNC),syminst(NULL));
					code(funcinst(I_POPIGNORE));
	
					code(funcinst(I_RETURNV));
					patchlocals(yyDollar[4].in);
					endclass(yyDollar[2].sym);
					yyVAL.in = futureinstnode();
					fakeval();
					}
	case 120:
		yyDollar = yyS[yypt-0:yypt+1]
//line gram.y:407
		{ yyVAL.sym = uniqvar(Methtemp); }
	case 121:
		yyDollar = yyS[yypt-2:yypt+1]
//line gram.y:409
		{ Methtemp=yyDollar[2].str; }
	case 122:
		yyDollar = yyS[yypt-4:yypt+1]
//line gram.y:410
		{
					if ( strcmp(yyDollar[2].str,"init") == 0 )
						Sawinit = 1;
					startdef(yyDollar[4].sym);
					}
	case 123:
		yyDollar = yyS[yypt-7:yypt+1]
//line gram.y:416
		{ if (startparams()) YYABORT; }
	case 124:
		yyDollar = yyS[yypt-9:yypt+1]
//line gram.y:418
		{ endparams(yyDollar[6].in,yyDollar[9].num,yyDollar[4].sym); }
	case 125:
		yyDollar = yyS[yypt-14:yypt+1]
//line gram.y:419
		{
					code(funcinst(I_RETURN));
					patchlocals(yyDollar[6].in);
					enddef(yyDollar[4].sym);
	
					/* Push the method name and function value, */
					/* to be retrieved by I_CLASSINIT. */
					code2(funcinst(I_STRINGPUSH),strinst(yyDollar[2].str));
					code2(funcinst(I_VAREVAL), syminst(yyDollar[4].sym));
					}
	case 126:
		yyDollar = yyS[yypt-2:yypt+1]
//line gram.y:429
		{ Methtemp = yyDollar[2].str; }
	case 127:
		yyDollar = yyS[yypt-4:yypt+1]
//line gram.y:430
		{
					if ( strcmp(yyDollar[2].str,"init") == 0 )
						Sawinit = 1;
					startdef(yyDollar[4].sym);
					}
	case 128:
		yyDollar = yyS[yypt-6:yypt+1]
//line gram.y:436
		{ endparams(yyDollar[6].in,0,yyDollar[4].sym); /* 0 parameters */ }
	case 129:
		yyDollar = yyS[yypt-10:yypt+1]
//line gram.y:437
		{
					code(funcinst(I_RETURN));
					patchlocals(yyDollar[6].in);
					enddef(yyDollar[4].sym);
	
					/* Push the method name and function value, */
					/* to be retrieved by I_CLASSINIT. */
					code2(funcinst(I_STRINGPUSH),strinst(yyDollar[2].str));
					code2(funcinst(I_VAREVAL), syminst(yyDollar[4].sym));
					}
	case 130:
		yyDollar = yyS[yypt-0:yypt+1]
//line gram.y:448
		{ yyVAL.in = code(funcinst(I_CURROBJEVAL)); }
	case 131:
		yyDollar = yyS[yypt-0:yypt+1]
//line gram.y:450
		{
			yyVAL.in = code3(funcinst(I_VAREVAL),Stopcode,funcinst(I_CURROBJEVAL));
			}
	case 132:
		yyDollar = yyS[yypt-0:yypt+1]
//line gram.y:454
		{ yyVAL.in = futureinstnode(); }
	case 133:
		yyDollar = yyS[yypt-0:yypt+1]
//line gram.y:456
		{ yyVAL.in = code(funcinst(I_OBJCALLFUNCPUSH)); }
	case 144:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:468
		{ if ( Inselect == 0 ) {
					yyerror("\".number\" is only allowed in select expressions!");
					YYABORT;
					/*NOTREACHED*/
				  }
				}
	case 145:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:475
		{ yyVAL.in = code(numinst('+')); }
	case 146:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:476
		{ yyVAL.in = code(numinst('-')); }
	case 147:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:477
		{ yyVAL.in = code(numinst('*')); }
	case 148:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:478
		{ yyVAL.in = code(numinst('/')); }
	case 149:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:479
		{ yyVAL.in = code(numinst('|')); }
	case 150:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:480
		{ yyVAL.in = code(numinst('&')); }
	case 151:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:481
		{ yyVAL.in = code(numinst('^')); }
	case 152:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:482
		{ yyVAL.in = code(numinst('>')); }
	case 153:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:483
		{ yyVAL.in = code(numinst('<')); }
	case 154:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:484
		{ yyVAL.in = code(numinst('=')); }
	case 155:
		yyDollar = yyS[yypt-0:yypt+1]
//line gram.y:486
		{ yyVAL.in = futureinstnode(); }
	case 156:
		yyDollar = yyS[yypt-0:yypt+1]
//line gram.y:488
		{ yyVAL.in = code2(funcinst(I_GOTO),Stopcode); }
	case 157:
		yyDollar = yyS[yypt-0:yypt+1]
//line gram.y:490
		{ yyVAL.in = code2(funcinst(I_TCONDEVAL),Stopcode);}
	case 158:
		yyDollar = yyS[yypt-0:yypt+1]
//line gram.y:492
		{ yyVAL.in = code3(funcinst(I_TFCONDEVAL),Stopcode,Stopcode);}
	case 159:
		yyDollar = yyS[yypt-0:yypt+1]
//line gram.y:494
		{ yyVAL.in = code2(funcinst(I_CONSTANT), numinst(1)); }
	case 161:
		yyDollar = yyS[yypt-0:yypt+1]
//line gram.y:497
		{ yyVAL.in = code3(funcinst(I_FORIN1),Stopcode,Stopcode); }
	case 162:
		yyDollar = yyS[yypt-0:yypt+1]
//line gram.y:499
		{ yyVAL.in = code(funcinst(I_FORIN2)); }
	case 163:
		yyDollar = yyS[yypt-0:yypt+1]
//line gram.y:501
		{ yyVAL.in = code(funcinst(I_FORINEND)); }
	case 164:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:503
		{ yyVAL.in = code2(funcinst(I_AND1),Stopcode); }
	case 165:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:505
		{ yyVAL.in = code2(funcinst(I_OR1),Stopcode); }
	case 166:
		yyDollar = yyS[yypt-0:yypt+1]
//line gram.y:507
		{
				Inselect++;
				/* (void) makeqmark(); */
				yyVAL.in=code(funcinst(I_SELECT1));
				}
	case 167:
		yyDollar = yyS[yypt-0:yypt+1]
//line gram.y:513
		{ yyVAL.in = code2(funcinst(I_SELECT2), Stopcode); }
	case 168:
		yyDollar = yyS[yypt-0:yypt+1]
//line gram.y:515
		{ yyVAL.in = code2(funcinst(I_SELECT3), Stopcode); }
	case 169:
		yyDollar = yyS[yypt-0:yypt+1]
//line gram.y:517
		{
					/* bltin-or-0, # params, func name, # locals */
					yyVAL.in = code4(bltininst((BLTINCODE)0),
							Stopcode,Stopcode,Stopcode);
					}
	case 170:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:522
		{ yyVAL.sym = uniqvar("function"); }
	case 171:
		yyDollar = yyS[yypt-0:yypt+1]
//line gram.y:524
		{ yyVAL.num = 0; }
	case 172:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:525
		{ yyVAL.num = yyDollar[1].num; }
	case 173:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:526
		{ yyVAL.num = 0; }
	case 174:
		yyDollar = yyS[yypt-3:yypt+1]
//line gram.y:527
		{ yyVAL.num = yyDollar[1].num; }
	case 175:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:529
		{ yyVAL.num = 1; }
	case 176:
		yyDollar = yyS[yypt-3:yypt+1]
//line gram.y:530
		{ yyVAL.num = yyDollar[1].num + 1; }
	case 177:
		yyDollar = yyS[yypt-0:yypt+1]
//line gram.y:532
		{ code2(funcinst(I_CONSTANT),numinst(0)); }
	case 178:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:533
		{ code2(funcinst(I_CONSTANT),numinst(yyDollar[1].num)); }
	case 179:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:534
		{ code2(funcinst(I_DOTDOTARG),numinst(0)); }
	case 180:
		yyDollar = yyS[yypt-3:yypt+1]
//line gram.y:535
		{ code2(funcinst(I_DOTDOTARG),numinst(yyDollar[1].num)); }
	case 181:
		yyDollar = yyS[yypt-4:yypt+1]
//line gram.y:536
		{ code2(funcinst(I_VARG),numinst(0)); }
	case 182:
		yyDollar = yyS[yypt-6:yypt+1]
//line gram.y:537
		{ code2(funcinst(I_VARG),numinst(yyDollar[1].num)); }
	case 183:
		yyDollar = yyS[yypt-0:yypt+1]
//line gram.y:539
		{ code2(funcinst(I_CONSTANT),numinst(1)); }
	case 184:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:540
		{ code2(funcinst(I_CONSTANT),numinst(1+yyDollar[1].num)); }
	case 185:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:541
		{ code2(funcinst(I_DOTDOTARG),numinst(1)); }
	case 186:
		yyDollar = yyS[yypt-3:yypt+1]
//line gram.y:542
		{ code2(funcinst(I_DOTDOTARG),numinst(1+yyDollar[1].num)); }
	case 187:
		yyDollar = yyS[yypt-4:yypt+1]
//line gram.y:543
		{ code2(funcinst(I_VARG),numinst(1)); }
	case 188:
		yyDollar = yyS[yypt-6:yypt+1]
//line gram.y:544
		{ code2(funcinst(I_VARG),numinst(1+yyDollar[1].num)); }
	case 189:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:546
		{ yyVAL.num = 1; }
	case 190:
		yyDollar = yyS[yypt-3:yypt+1]
//line gram.y:547
		{ yyVAL.num = yyDollar[1].num + 1; }
	case 192:
		yyDollar = yyS[yypt-0:yypt+1]
//line gram.y:551
		{ yyVAL.num = 0; }
	case 193:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:552
		{ yyVAL.num = 1; }
	case 194:
		yyDollar = yyS[yypt-3:yypt+1]
//line gram.y:553
		{ yyVAL.num = yyDollar[1].num + 1; }
	case 198:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:560
		{ yyVAL.sym = installvar(yyDollar[1].str); }
	case 199:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:561
		{ yyVAL.sym = installvar(yyDollar[1].sym->name.u.str); }
	case 200:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:562
		{ yyVAL.sym = installvar(yyDollar[1].sym->name.u.str); }
	case 201:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:563
		{ yyVAL.sym = installvar(yyDollar[1].sym->name.u.str); }
	case 202:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:564
		{ yyVAL.sym = installvar(yyDollar[1].sym->name.u.str); }
	case 203:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:565
		{ yyVAL.sym = installvar(yyDollar[1].sym->name.u.str); }
	case 204:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:566
		{ yyVAL.sym = installvar(yyDollar[1].sym->name.u.str); }
	case 205:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:567
		{ yyVAL.sym = installvar(yyDollar[1].sym->name.u.str); }
	case 206:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:568
		{ yyVAL.sym = installvar(yyDollar[1].sym->name.u.str); }
	case 207:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:569
		{ yyVAL.sym = installvar(yyDollar[1].sym->name.u.str); }
	case 208:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:570
		{ yyVAL.sym = installvar(yyDollar[1].sym->name.u.str); }
	case 209:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:571
		{ yyVAL.sym = installvar(yyDollar[1].sym->name.u.str); }
	case 210:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:572
		{ yyVAL.sym = installvar(yyDollar[1].sym->name.u.str); }
	case 211:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:574
		{ yyVAL.str = yyDollar[1].str;  }
	case 212:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:575
		{ yyVAL.str = yyDollar[1].sym->name.u.str;  }
	case 213:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:576
		{ yyVAL.str = yyDollar[1].sym->name.u.str;  }
	case 214:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:578
		{ yyVAL.in = code2(funcinst(I_STRINGPUSH),strinst(yyDollar[1].str));  }
	case 215:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:579
		{ yyVAL.in = code2(funcinst(I_STRINGPUSH),strinst(yyDollar[1].sym->name.u.str));  }
	case 216:
		yyDollar = yyS[yypt-1:yypt+1]
//line gram.y:580
		{ yyVAL.in = code2(funcinst(I_STRINGPUSH),strinst(yyDollar[1].sym->name.u.str));  }
	case 217:
		yyDollar = yyS[yypt-3:yypt+1]
//line gram.y:581
		{ yyVAL.in = yyDollar[2].in; }
	}
	goto yystack /* stack new state and value */
}
